// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/Sereggan/quiz-app/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockQuiz is a mock of Quiz interface.
type MockQuiz struct {
	ctrl     *gomock.Controller
	recorder *MockQuizMockRecorder
}

// MockQuizMockRecorder is the mock recorder for MockQuiz.
type MockQuizMockRecorder struct {
	mock *MockQuiz
}

// NewMockQuiz creates a new mock instance.
func NewMockQuiz(ctrl *gomock.Controller) *MockQuiz {
	mock := &MockQuiz{ctrl: ctrl}
	mock.recorder = &MockQuizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuiz) EXPECT() *MockQuizMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuiz) Create(quiz *model.Quiz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", quiz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQuizMockRecorder) Create(quiz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuiz)(nil).Create), quiz)
}

// Delete mocks base method.
func (m *MockQuiz) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQuizMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuiz)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockQuiz) Find(id int) (*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockQuizMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockQuiz)(nil).Find), id)
}

// FindAll mocks base method.
func (m *MockQuiz) FindAll() ([]*model.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*model.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockQuizMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockQuiz)(nil).FindAll))
}
